local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "HUAKUY",
    LoadingTitle = "เล่นโปรทำเหี้ยไร",
    ConfigFolder = "RayfieldConfigs"
})

-- Tab Player
local PlayerTab = Window:CreateTab("player")

-- วิ่ง 100
PlayerTab:CreateToggle({
    Name = "วิ่ง100พี่ตูน",
    CurrentValue = false,
    Flag = "SpeedToggle",
    Callback = function(state)
        local player = game:GetService("Players").LocalPlayer
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.WalkSpeed = state and 100 or 16
        end
    end
})

-- หายตัว
PlayerTab:CreateToggle({
    Name = "หายตัว (คนอื่นมองไม่เห็น, มึงก็มองไม่เห็นคนอื่น)",
    CurrentValue = false,
    Flag = "InvisibleToggle",
    Callback = function(state)
        local player = game.Players.LocalPlayer
        local char = player.Character or player.CharacterAdded:Wait()
        local root = char:FindFirstChild("HumanoidRootPart")
        if not root then return end

        if state then
            originalPos = root.Position
            root.Anchored = true
            root.CFrame = CFrame.new(999999, -5000, 999999)
        else
            if originalPos then
                root.CFrame = CFrame.new(originalPos)
            end
            root.Anchored = false
        end
    end
})

-- Tab ฟังก์ชั่นหัวควย
local KUYTab = Window:CreateTab("ฟังชั่นหัวควย")

-- Aimbot + FOV
local AimbotConnection
local FOVCircle
KUYTab:CreateToggle({
    Name = "ล็อคหัวควย (Aimbot)",
    CurrentValue = false,
    Flag = "AimbotToggle",
    Callback = function(state)
        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")
        local Workspace = game:GetService("Workspace")
        local Camera = Workspace.CurrentCamera
        local LocalPlayer = Players.LocalPlayer

        local MAX_DISTANCE = 9000
        local FOV_RADIUS = 100

        if state then
            if not FOVCircle then
                FOVCircle = Drawing.new("Circle")
                FOVCircle.Color = Color3.fromRGB(255,0,0)
                FOVCircle.Thickness = 2
                FOVCircle.NumSides = 64
                FOVCircle.Radius = FOV_RADIUS
                FOVCircle.Filled = false
                FOVCircle.Visible = true
            end
        else
            if FOVCircle then FOVCircle:Remove() FOVCircle=nil end
        end

        if state then
            if AimbotConnection then AimbotConnection:Disconnect() end
            AimbotConnection = RunService.RenderStepped:Connect(function()
                local screenCenter = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)
                if FOVCircle then
                    FOVCircle.Position = screenCenter
                end

                local function isInFOV(head)
                    local screenPos, onScreen = Camera:WorldToViewportPoint(head.Position)
                    if not onScreen then return false end
                    local headPos2D = Vector2.new(screenPos.X, screenPos.Y)
                    return (screenCenter - headPos2D).Magnitude <= FOV_RADIUS
                end

                local function getClosestTarget()
                    local myChar = LocalPlayer.Character
                    if not myChar or not myChar:FindFirstChild("Head") then return nil end

                    local myHead = myChar.Head
                    local closest = nil
                    local shortest = MAX_DISTANCE
                    local hasTeamSystem = LocalPlayer.Team ~= nil

                    for _, player in ipairs(Players:GetPlayers()) do
                        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
                            local char = player.Character
                            local head = char.Head
                            local humanoid = char:FindFirstChild("Humanoid")
                            local distance = (head.Position - myHead.Position).Magnitude
                            local isSameTeam = hasTeamSystem and player.Team == LocalPlayer.Team
                            local isDead = humanoid and humanoid.Health <= 0

                            local rayParams = RaycastParams.new()
                            rayParams.FilterDescendantsInstances = {myChar, Camera}
                            rayParams.FilterType = Enum.RaycastFilterType.Blacklist

                            local result = Workspace:Raycast(myHead.Position, (head.Position - myHead.Position).Unit * distance, rayParams)
                            local isWallBlocked = result and result.Instance and not result.Instance:IsDescendantOf(char)

                            if distance <= MAX_DISTANCE and not isSameTeam and not isDead and not isWallBlocked and isInFOV(head) and distance < shortest then
                                shortest = distance
                                closest = head
                            end
                        end
                    end
                    return closest
                end

                local target = getClosestTarget()
                if target then
                    Camera.CFrame = CFrame.lookAt(Camera.CFrame.Position, target.Position)
                end
            end)
        else
            if AimbotConnection then
                AimbotConnection:Disconnect()
                AimbotConnection=nil
            end
        end
    end
})

-- ESP
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local ESPSettings = {
    Box = false,
    Skeleton = false,
    Tracer = false,
    Name = false,
    Health = false,
    TeamCheck = true
}

local ESPObjects = {}
local ESPConnection

-- ฟังก์ชันช่วย: เช็คว่ามี ESP ตัวไหนเปิดอยู่บ้าง
local function anyESPEnabled()
    for k,v in pairs(ESPSettings) do
        if k ~= "TeamCheck" and k ~= "FFA" and v then
            return true
        end
    end
    return false
end

-- ฟังก์ชันช่วย: ลบเฉพาะ feature หนึ่งของผู้เล่น
local function removeFeatureFromPlayer(player, feature)
    if not ESPObjects[player] then return end
    local obj = ESPObjects[player][feature]
    if not obj then return end

    if typeof(obj) == "table" then
        for _,v in pairs(obj) do if v then pcall(function() v:Remove() end) end end
    else
        pcall(function() obj:Remove() end)
    end

    ESPObjects[player][feature] = nil

    -- ถ้าไม่มี object เหลือ ให้ลบ table ของผู้เล่นเลย
    local empty = true
    for _,v in pairs(ESPObjects[player]) do
        if v then empty = false break end
    end
    if empty then ESPObjects[player] = nil end
end

-- ฟังก์ชันช่วย: สตาร์ท/หยุด ESPConnection
local function startESPConnection()
    if ESPConnection then return end
    ESPConnection = RunService.RenderStepped:Connect(function()
        pcall(updateESP)
    end)
end

local function stopESPConnection()
    if ESPConnection then
        ESPConnection:Disconnect()
        ESPConnection = nil
    end
end

-- Toggle: ESP Box
KUYTab:CreateToggle({
    Name = "ESP Box",
    CurrentValue = false,
    Flag = "BoxToggle",
    Callback = function(state)
        ESPSettings.Box = state
        if state then
            startESPConnection()
        else
            -- ลบเฉพาะ Box ของทุกผู้เล่น
            for _,plr in ipairs(Players:GetPlayers()) do
                removeFeatureFromPlayer(plr, "Box")
            end
            if not anyESPEnabled() then
                stopESPConnection()
            end
        end
    end
})

-- Toggle: ESP Skeleton
KUYTab:CreateToggle({
    Name = "ESP Skeleton",
    CurrentValue = false,
    Flag = "SkeletonToggle",
    Callback = function(state)
        ESPSettings.Skeleton = state
        if state then
            startESPConnection()
        else
            for _,plr in ipairs(Players:GetPlayers()) do
                removeFeatureFromPlayer(plr, "Skeleton")
            end
            if not anyESPEnabled() then
                stopESPConnection()
            end
        end
    end
})

-- Toggle: ESP Tracer
KUYTab:CreateToggle({
    Name = "ESP Tracer",
    CurrentValue = false,
    Flag = "TracerToggle",
    Callback = function(state)
        ESPSettings.Tracer = state
        if state then
            startESPConnection()
        else
            for _,plr in ipairs(Players:GetPlayers()) do
                removeFeatureFromPlayer(plr, "Tracer")
            end
            if not anyESPEnabled() then
                stopESPConnection()
            end
        end
    end
})

-- Toggle: ESP Name
KUYTab:CreateToggle({
    Name = "ESP Name",
    CurrentValue = false,
    Flag = "NameToggle",
    Callback = function(state)
        ESPSettings.Name = state
        if state then
            startESPConnection()
        else
            for _,plr in ipairs(Players:GetPlayers()) do
                removeFeatureFromPlayer(plr, "Name")
            end
            if not anyESPEnabled() then
                stopESPConnection()
            end
        end
    end
})

-- Toggle: ESP Health
KUYTab:CreateToggle({
    Name = "ESP Health",
    CurrentValue = false,
    Flag = "HealthToggle",
    Callback = function(state)
        ESPSettings.Health = state
        if state then
            startESPConnection()
        else
            for _,plr in ipairs(Players:GetPlayers()) do
                removeFeatureFromPlayer(plr, "Health")
            end
            if not anyESPEnabled() then
                stopESPConnection()
            end
        end
    end
})


Players.PlayerRemoving:Connect(removeESP)
